Starting out with setting up git, create a repo. (not sure how through CLI).
Set credentials using;
git config --global user.name "<name>"
git config --global user.email "<email>"

Initialize repo with a README.md (markdown lang)
echo "# <some_title>" > README.md
git init
git add README.md // Adds file to be worked upon
git commit -m "commit message"
git branch -M main // rename  <oldbranch> to 'main' if capital M, forces rename (if eg. <oldbranch> got turned into new one by having intermediate commits
git remote add origin https://url_to_repo.git

git status shows where in the lifecycle of files we are on the current branch; eg. untracked, unmodified, modified, staged.
A reminder if git-fu needs to be refreshed, visit git-scm.com, the docs are beyond awesome.

git commit -a -m 'blabla' # Commits changes, skipping staging area (i.e. skips staging file with git add)
git rm <file> # removes <file> from git and working directory, it stages the files removal for a commit
git rm --cached <file> # keep file in working dir but stage <file> for removal in git (e.g. if staged but forgot to add something to .gitignore
git mv <file_old> <file_new> # Convenience function involving 3 cmds:% mv <file_old> <file_new> && git rm <file_old> && git add <file_new>


git log has many useful flags for viewing the commit history. Most useful is likely -p (for verbosity on actual edits made)
with the flag --pretty you can use format as such: git log --pretty=format:"%h - %an, %ar : %s" to make it fit with machine parsing
Specifier 	Description of Output
%H		Commit hash
%h		Abbreviated commit hash
%T		Tree hash
%t		Abbreviated tree hash
%P		Parent hashes
%p		Abbreviated parent hashes
%an		Author name
%ae		Author email
%ad		Author date (format respects the --date=option)
%ar		Author date, relative
%cn		Committer name
%ce		Committer email
%cd		Committer date
%cr		Committer date, relative
%s		Subject


Tags are used to mark a point in development such as a version. To easier see where one iteration begins and ends.
Tags needs to be pushed to a remote same as commits.

git diff --staged # Shows diff of staged files

Next up, learn about how branching can aid collaboration in dev work continentally.
And/Or continue with setting up a dev environment for a new project.
